version: '3.8'

services:
  # --- SERVICIOS DE APLICACIÓN ---
  api-gateway:
    build:
      context: .
      dockerfile: ./services/api_gateway/Dockerfile
    environment:
      - PORT=${API_GATEWAY_PORT}
      - PROFESSORS_HOST="${PROFESSORS_HOST}"
      - SCRAPPER_HOST="${SCRAPPER_HOST}"
      - SECURITY_HOST="${SECURITY_HOST}"
      - PROFESSORS_PORT="${PROFESSORS_PORT}"
      - SCRAPPER_PORT="${SCRAPPER_PORT}"
      - SECURITY_PORT="${SECURITY_PORT}"
      - RABBIT_URL="${RABBIT_URL}"
      - JWT_SECRET="${JWT_SECRET}"
      - JWT_EXPIRES_IN="${JWT_EXPIRES_IN}"
    ports:
      - '4351:4351'
    command: npm run start:prod
    depends_on:
      - rabbitmq
      - postgres
    # 1. Etiquetas de Traefik para el routing público
    labels:
      - "traefik.enable=true"
      # DOMINIO ACTUALIZADO
      - "traefik.http.routers.api-gateway-router.rule=Host(`api.20040521.xyz`)"
      - "traefik.http.routers.api-gateway-router.entrypoints=websecure"
      - "traefik.http.routers.api-gateway-router.tls.certresolver=dokploy-le"
      - "traefik.http.services.api-gateway-service.loadbalancer.server.port=4351"
    # 2. Conexión a la red de Dokploy
    networks:
      - dokploy-network

  professors:
    build:
      context: .
      dockerfile: ./services/professors/Dockerfile
    environment:
      - PORT=${PROFESSORS_PORT}
      - API_GATEWAY_HOST="${API_GATEWAY_HOST}"
      - SCRAPPER_HOST="${SCRAPPER_HOST}"
      - SECURITY_HOST="${SECURITY_HOST}"
      - API_GATEWAY_PORT="${API_GATEWAY_PORT}"
      - SCRAPPER_PORT="${SCRAPPER_PORT}"
      - SECURITY_PORT="${SECURITY_PORT}"
      - DB_URL="${DB_URL}"
      - RABBIT_URL="${RABBIT_URL}"
      - MONGO_URL="${MONGO_URL}"
    ports:
      - '4352:4352'
    command: npm run start:prod
    depends_on:
      - rabbitmq
      - postgres
      - mongodb
    # 2. Conexión a la red de Dokploy
    networks:
      - dokploy-network
    
  security:
    build:
      context: .
      dockerfile: ./services/security/Dockerfile
    environment:
      - PORT=${SECURITY_PORT}
      - PROFESSORS_HOST="${PROFESSORS_HOST}"
      - SCRAPPER_HOST="${SCRAPPER_HOST}"
      - SECURITY_HOST="${SECURITY_HOST}"
      - PROFESSORS_PORT="${PROFESSORS_PORT}"
      - SCRAPPER_PORT="${SCRAPPER_PORT}"
      - SECURITY_PORT="${SECURITY_PORT}"
      - RABBIT_URL="${RABBIT_URL}"
      - JWT_SECRET="${JWT_SECRET}"
      - JWT_EXPIRES_IN="${JWT_EXPIRES_IN}"
      - KEY_PASSPHRASE="${KEY_PASSPHRASE}"
      - PRIVATE_KEY_B64="${PRIVATE_KEY_B64}"
    ports:
      - '4354:4354'
    command: npm run start:prod
    depends_on:
      - rabbitmq
      - postgres
    # 2. Conexión a la red de Dokploy
    networks:
      - dokploy-network

  scrapper:
    build:
      context: .
      dockerfile: ./services/scrapper/Dockerfile
    environment:
      - PORT=${SRAPPER_PORT}
      - API_GATEWAY_HOST="${API_GATEWAY_HOST}"
      - PROFESSORS_HOST="${PROFESSORS_HOST}"
      - API_GATEWAY_PORT="${API_GATEWAY_PORT}"
      - PROFESSORS_PORT="${PROFESSORS_PORT}"
      - RABBIT_URL="${RABBIT_URL}"
    ports:
      - '4353:4353'
    command: npm run start:prod
    depends_on:
      - rabbitmq
      - postgres
    # 2. Conexión a la red de Dokploy
    networks:
      - dokploy-network
    
  # --- SERVICIOS DE INFRAESTRUCTURA ---

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: oswgg
      POSTGRES_PASSWORD: rootOGG040520.dev
      POSTGRES_DB: campus_professors
    # Quitamos el puerto público si no lo necesitas (opcional)
    # ports:
    #   - '5433:5432' 
    volumes:
      # CAMBIO CLAVE: Usamos bind mount relativo para persistencia en Dokploy
      - ../files/pgsql:/var/lib/postgresql/data
    networks:
      - dokploy-network

  mongodb:
    image: mongo:7-jammy
    environment:
      MONGO_INITDB_ROOT_USERNAME: oswgg
      MONGO_INITDB_ROOT_PASSWORD: rootOGG040520.dev
      MONGO_INITDB_DATABASE: campus
    # Quitamos el puerto público si no lo necesitas (opcional)
    # ports:
    #   - '27017:27017'
    volumes:
      # CAMBIO CLAVE: Usamos bind mount relativo para persistencia en Dokploy
      - ../files/mongodb:/data/db
    networks:
      - dokploy-network

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: oswgg
      RABBITMQ_DEFAULT_PASS: devOGG040520.dev
      RABBITMQ_DEFAULT_VHOST: /
    # Mantenemos los puertos para que puedas acceder al Management UI (15672)
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      # CAMBIO CLAVE: Usamos bind mount relativo para persistencia en Dokploy
      - ../files/rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - dokploy-network

# --- REDES ---
networks:
  dokploy-network:
    external: true

# Hemos eliminado la sección 'volumes' de la raíz para simplificar la configuración de persistencia.
