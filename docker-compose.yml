services: 
  api-gateway:
    build:
      context: .
      dockerfile: ./services/api_gateway/Dockerfile
    container_name: api-gateway
    ports:
      - '4351:4351'
    env_file:
      - ./services/api_gateway/.env
    command: npm run start:prod
    depends_on:
      - rabbitmq
      - postgres

  professors:
    build:
      context: .
      dockerfile: ./services/professors/Dockerfile
    container_name: professors
    ports:
      - '4352:4352'
    env_file:
      - ./services/professors/.env
    command: npm run start:prod
    depends_on:
      - rabbitmq
      - postgres
      - mongodb
    
  security:
    build:
      context: .
      dockerfile: ./services/security/Dockerfile
    container_name: security
    ports:
      - '4354:4354'
    env_file:
      - ./services/security/.env
    command: npm run start:prod
    depends_on:
      - rabbitmq
      - postgres

  scrapper:
    build:
      context: .
      dockerfile: ./services/scrapper/Dockerfile
    container_name: scrapper
    ports:
      - '4353:4353'
    env_file:
      - ./services/scrapper/.env
    command: npm run start:prod
    depends_on:
      - rabbitmq
      - postgres
    
  postgres:
    image: postgres:15-alpine
    container_name: pgsql
    environment:
      POSTGRES_USER: oswgg
      POSTGRES_PASSWORD: rootOGG040520.dev
      POSTGRES_DB: campus_professors
    ports:
      - '5433:5432'
    volumes:
      - pgsql_data:/var/lib/postgresql/data

  mongodb:
    image: mongo:7-jammy
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: oswgg
      MONGO_INITDB_ROOT_PASSWORD: rootOGG040520.dev
      MONGO_INITDB_DATABASE: campus
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: oswgg
      RABBITMQ_DEFAULT_PASS: devOGG040520.dev
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 30s
      retries: 5

volumes:
  rabbitmq_data:
  pgsql_data:
  mongodb_data: